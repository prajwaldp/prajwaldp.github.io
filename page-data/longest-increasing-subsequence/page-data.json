{"componentChunkName":"component---src-templates-blog-post-js","path":"/longest-increasing-subsequence","result":{"data":{"markdownRemark":{"html":"<p>The longest increasing subsequence problem is a popular problem to get\nacquanited with dynamic programming. Given a list, the task is to find the\nlength of the longest increasing subsequence in it (finding the subsequence\nitself is a variation, and a harder problem to solve).</p>\n<p>Let's solve a problem. We have the following list <code>A = [1, 9, 2, 8, 3, 7, 4, 6, 6]</code>.\nDynamic Programming solves a smaller subproblem. What is the longest\nsubsequence considering only the slice <code>A[0:1]</code>. It's 1. The longest subsequence\nconsidering only the slice <code>A[0:2]</code>. It's 1. We can just really make two\nincreasing subsequences, <code>[1]</code> and <code>[9]</code>, both of length 1.</p>","frontmatter":{"updatedOn":"June 26, 2020","slug":"/longest-increasing-subsequence","title":"Longest Increasing Subsequence"}}},"pageContext":{"slug":"/longest-increasing-subsequence"}}}