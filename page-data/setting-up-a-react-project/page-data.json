{"componentChunkName":"component---src-templates-blog-post-js","path":"/setting-up-a-react-project","result":{"data":{"markdownRemark":{"html":"<p>First, let's set up out project directory:</p>\n<pre><code class=\"language-bash\">mkdir my-new-project\ncd my-new-project\nnpm init -y\n</code></pre>\n<p>Install all the packages we need.</p>\n<pre><code class=\"language-bash\">npm install --save react react-dom\nnpm install --save-dev webpack webpack-cli webpack-dev-server html-webpack-plugin\nnpm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader\n</code></pre>\n<ul>\n<li>Only <code>react</code> and <code>react-dom</code> are production dependencies.</li>\n<li><code>@babel/preset-env</code> is smart and makes our lives easier according to <a href=\"https://babeljs.io/docs/en/babel-preset-env\">babel</a>. So we use that instead of trying to figure out which ES version and feature-set we want.</li>\n<li><code>@babel/preset-react</code> is for <code>JSX</code> that React uses.</li>\n<li><code>babel-loader</code> is the webpack loader for ES6 (and higher) modules.</li>\n</ul>\n<p>Our <code>babel</code> configuration goes into the file <code>.babelrc</code> in the project root.</p>\n<pre><code class=\"language-json\">// .babelrc\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n}\n</code></pre>\n<p>This is our webpack configuration.</p>\n<pre><code class=\"language-jsx\">// webpack.config.js\nconst path = require(\"path\")\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\")\n\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.join(__dirname, \"/dist\"),\n    filename: \"bundle.js\",\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: { loader: \"babel-loader\" },\n      },\n    ],\n  },\n  plugins: [new HtmlWebpackPlugin({ template: \"src/index.html\" })],\n}\n</code></pre>\n<ul>\n<li>The entry file is <code>src/index.js</code>, output directory is <code>dist</code> , and the output bundle is <code>dist/bundle.js</code></li>\n<li><code>js</code> files are run through the <code>babel-loader</code></li>\n<li>The <code>HtmlWebpackPlugin</code> webpack plugin creates the HTML file that serves the bundled JavaScript. The HTML template for this plugin is <code>src/index.html</code> and the file that is created after building is <code>dist/index.html</code></li>\n</ul>\n<p>The configuration files are dealt with. The following are project source code files.</p>\n<pre><code class=\"language-jsx\">// src/index.js\nimport React from \"react\"\nimport ReactDom from \"react-dom\"\nimport App from \"./components/App.js\"\n\nReactDom.render(&#x3C;App />, document.getElementById(\"app\"))\n</code></pre>\n<pre><code class=\"language-html\">&#x3C;!-- src/index.html -->\n&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;meta charset=\"utf-8\" />\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    &#x3C;title>My New Project&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div id=\"app\">&#x3C;/div>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<pre><code class=\"language-jsx\">// src/components/App.js\nimport React from \"react\"\n\nconst App = () => (\n  &#x3C;div>\n    &#x3C;h1>Hello, World!&#x3C;/h1>\n  &#x3C;/div>\n)\n\nexport default App\n</code></pre>\n<p>Add the following commands to <code>package.json</code></p>\n<pre><code class=\"language-json\">// package.json\n{\n  /*\n  ...\n    */\n  \"scripts\": {\n    \"build\": \"webpack --mode production\",\n    \"dev\": \"webpack-dev-server --open --mode development\"\n  }\n  /*\n  ...\n    */\n}\n</code></pre>\n<p>Hit <code>npm run dev</code> and start developing the app.</p>\n<p>Browse the files at this stage <a href=\"https://github.com/prajwaldp/react-productivity-app/tree/fedc72ab49897af2229bb7edb1605cd2092a15b2\">here</a>.</p>\n<h2>Install PostCSS</h2>\n<pre><code class=\"language-bash\">npm install â€”save-dev css-loader style-loader postcss-loader\n</code></pre>\n<pre><code class=\"language-jsx\">// postcss.config.js\nmodule.exports = {\n  plugins: [],\n}\n</code></pre>\n<pre><code class=\"language-jsx\">// webpack.config.js\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.css$/,\n        use: [\"style-loader\", \"css-loader\", \"postcss-loader\"],\n      },\n    ],\n  },\n  // ...\n}\n</code></pre>\n<p>Browse the files at this stage <a href=\"https://github.com/prajwaldp/react-productivity-app/tree/bfa9b24192db588fb0f5d33100f72435f20d8cbd\">here</a></p>\n<h2>Install Tailwindcss</h2>\n<pre><code class=\"language-bash\">npm install tailwindcss\n</code></pre>\n<pre><code class=\"language-jsx\">// postcss.config.js\nmodule.exports = {\n  plugins: [require(\"autoprefixer\"), require(\"tailwindcss\")],\n}\n</code></pre>\n<pre><code class=\"language-jsx\">// src/components/App.js\nimport React from \"react\"\nimport \"./App.css\"\n\nconst App = () => (\n  &#x3C;div className=\"p-10 text-center bg-pink-100\">\n    &#x3C;h1 className=\"text-4xl text-gray-700 font-extrabold\">Hello, World!&#x3C;/h1>\n  &#x3C;/div>\n)\n\nexport default App\n</code></pre>\n<pre><code class=\"language-css\">/* src/components/App.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre>\n<p>Create the tailwindcss config file - <code>tailwind.config.js</code>. This is needed for the Tailwind CSS IntelliSense plugin to get activated in Visual Studio Code.</p>\n<pre><code class=\"language-bash\">npx tailwind init\n</code></pre>\n<p>Browse the files at this stage <a href=\"https://github.com/prajwaldp/react-productivity-app/tree/d06c9d5526328d4e952fa4f407f8030b56a8ffab\">here</a>.</p>","frontmatter":{"updatedOn":"May 10, 2020","slug":"/setting-up-a-react-project","title":"Setting up a React Project with Webpack"}}},"pageContext":{"slug":"/setting-up-a-react-project"}}}